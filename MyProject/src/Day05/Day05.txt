---------------------------------
1. 클래스 심화
	- Field(변수)
		1) 클래스변수, 2) 인스턴스 변수, 3) 로컬 변수
		- 이 중 1), 2)를 필드라고 한다.
		
		1) 클래스 변수
			- 변수 앞에 static 키워드 사용
			- 모든 객체가 공유하는 변수
			- 객체를 생성하지 않아도 사용할 수 있음.
		2) 인스턴스 변수
			- 변수 앞에 static이 없는 변수(일반적인 변수)  	cf) Python : self.변수명
			- 객체를 생성할 때 생성되며, 객체마다 다름
		3) 로컬 변수
			- 함수 내, 제어문 내에서 선언된 변수
---------------------------------		
2. Method(메서드, 함수)
	- 클래스 내에 있는 함수
	- ex) public static void main(String args[]){
	
		  }
		- 접근 제한자 [static] 리턴타입 메서드명(매개변수.....){
		
		  }
		1) 접근 제한자
			- 메서드를 실행할 수 있는 권한, 가장 넓은 권한 public
		2) static
			- 객체 생성을 하지 않고도 사용할 수 있는지에 대한 keyword
			- static이 붙으면 객체 생성을 하지 않고 사용 가능
		3) 리턴타입
			- 메서드는 값을 받기만 하나요? NO, 처리 후 값을 돌려줄 수도 있음
			- 돌려주는 값이 없을 때 void
			- 돌려주는 값이 숫자라면 int, float, double 등이고 문자열이라면 String
		4) 메서드명
			- 변수명 규칙과 동일
			- 동사 + 대문자로 시작하는 명사 + 대명사로 시작하는 명사
			- printScreen, getPremium
		5) 매개변수(Parameter)
			- 메서드의 입력값을 의미
			- 메서드 입장에서는 외부에서 값을 받기 위해 사용
			- 입력값이 개수가 정해져 있을 때는 (int a, float b) 등으로 전체를 기술
		6) 리턴값
			- 메서드 선언할 때 void가 아닌 경우
			- 반드시 리턴 값이 있어야 한다.
			- return 값
		7) 메서드의 실행
			- call(호출), 부른 쪽을 caller, 불린 쪽을 callee
		8) 실행 순서
			- 처음 실행한 메서드가 가장 늦게 종료 된다.(FILO, Stack)	
			cf) FIFO(First Input First Out, Queue)
		9) 메서드 오버로딩(Overload)		
			- 같은 이름으로 입력값의 종류에 따라 다르게 처리하고 싶을 경우
---------------------------------
3. Constructor
	- new와 함께 객체를 생성할 때 사용
	- 주로 변수 초기화 및 생성 시 필요한 실행문들을 기록
	
	클래스명() {
	
	}  => new 클래스명() 이렇게 생성될 때를 처리
	
	클래스명(변수) {
	
	}  => new 클래스명(변수) 이렇게 생성될 때를 처리
---------------------------------
4. this
	- 객체가 본인(짐)을 말할 때 씀
	- 외부로부터의 변수명이 내가 가진 필드명과 동일할 때 this.필드명 이라고 써준다.
---------------------------------
5. 초기화 블럭
	- 2가지 타입이 있으며 무조건 실행되는 함수
	- 생성자보다 먼저 실행되며, 모든 생성자가 공통으로 적용되는 로직에 유용
	
	static {
	
	}  => 첫 번째 객체 생성 시 1회만 실행
	
	{
	
	}  => 객체 생성 시마다 실행
---------------------------------
6. 패키지
	- 클래스를 폴도별로 관리하기 위한 목적(용도별, 권한별)
---------------------------------
7. 접근제어
	- public : 누구든지 사용가능
	- protected : 누구든지(x), 상속받은(o), 동일디렉토리(o), 클래스내(o)
	- (default) 아무것도 안썻을 때 : 누구든지(x), 상속받은(x), 동일디렉토리(o), 클래스내(o)
	- private : 누구든지(x), 상속받은(x), 동일디렉토리(x), 클래스내(o)
---------------------------------
8. final
	- 변수에다가 final을 붙이면 수정이 불가능
	- 클래스에다가 final을 붙이면 상속 불가능
	- 메서드에다가 final을 붙이면 상속 후 수정 불가능
---------------------------------